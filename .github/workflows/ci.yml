name: CI

on:
  push:
    branches: [ main, staging, trying ]
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always
  NO_STD_TARGET: thumbv7em-none-eabi  # firmware uses atomics
  QEMU_TARGET: thumbv7m-none-eabi

jobs:
  test:
    strategy:
      matrix:
        rust:
          - stable
          - nightly
        os:
          - ubuntu-latest
          - macOS-latest
          - windows-latest
    runs-on: ${{ matrix.os }}
    timeout-minutes: 10
    steps:
    - uses: actions/checkout@v2
    - uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        toolchain: ${{ matrix.rust }}
        override: true
    - name: Setup mdBook
      uses: peaceiris/actions-mdbook@v1
      with:
        mdbook-version: latest
    - name: Install C libraries for tooling on ubuntu
      if: matrix.os == 'ubuntu-latest'
      run: sudo apt-get update && sudo apt-get install libudev-dev libusb-1.0-0-dev
    - name: install C libraries for tooling on macOS
      if: matrix.os == 'macOS-latest'
      run: brew install libusb
    - name: Build
      run: RUSTFLAGS='--deny warnings' cargo build
      shell: bash
      # NOTE order is important; running `mdbook` at the end = duplicate crate errors
    - name: Run book tests
      working-directory: book
      if: matrix.os != 'macOS-latest'
      run: mdbook test -L ../target/debug -L ../target/debug/deps
    - name: Run tests on ubuntu
      if: matrix.os != 'macOS-latest'
      run: cargo test --workspace
    - name: Run tests on macOS
      # NOTE defmt does not build for macOS because its `cortex-m-rt` dependency doesn't
      # (see https://github.com/rust-embedded/cortex-m-rt/issues/74), so we cannot use
      # `cargo test --workspace` and have to build the test suites individually instead
      if: matrix.os == 'macOS-latest'
      run: cargo test -p defmt -p defmt-decoder -p defmt-parser -p defmt-macros

  no-std:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        toolchain: stable
        override: true
        target: ${{ env.NO_STD_TARGET }}
    - name: Install dependencies
      run: rustup +stable target add ${{ env.NO_STD_TARGET }}
    - name: Build nRF52 examples
      working-directory: firmware/nrf52
      run: RUSTFLAGS='--deny warnings' cargo build --verbose --target ${{ env.NO_STD_TARGET }} --bins

  qemu:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        toolchain: stable
        override: true
        target: ${{ env.QEMU_TARGET }}
    - name: Install dependencies
      run: |
        sudo apt-get update && sudo apt-get install qemu
        rustup +stable target add ${{ env.QEMU_TARGET }}
    - name: Build QEMU examples
      working-directory: firmware/qemu
      run: RUSTFLAGS='--deny warnings' cargo build --verbose --target ${{ env.QEMU_TARGET }} --bins
    - name: Run QEMU examples
      working-directory: firmware/qemu
      run: |
        cargo rb log
        cargo rrb log
